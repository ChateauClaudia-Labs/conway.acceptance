import abc

from conway_acceptance.util.test_statics                           import TestStatics

class TestDatabase(abc.ABC):

    def __init__(self, manifest):
      '''
      The explanation of this class assumes you are familiar with the purpose of the `conway` and
      `conway_acceptance` modules. Please refer to their detailed README.md for an overall explanation.

      An instance of this class represents a database instance for the application that was built following the
      patterns of the `conway` module.

      Moreover, that database instance is not meant for production use, but for testing, withing the testing
      practices of the `conway_acceptance` module. Therefore:

      * This database is for the exclusive use of a test case

      * The database itself is a collection of Excel files and possibly under files, in a folder structure
        under a directory called `test_database`

      * The absolute path is something like {your deployment's scenario root directory}/{scenario_id}/test_database

      * The parent directory, {your deployment's scenario root directory}/{scenario_id}, also contains a folder
        `scenario_seed` that can be thought of as the data with which to initialize the database, i.e., Excel files
        and other files that are inputs to the test case that owns this database.

      * The `scenario_seed` was previously generated by an instance of the ScenarioGenerator class, using a 
        ScenarioSpec object as input.

      @param manifest A ScenarioManifest object that has connection strings to access the test database that should be used
          by the test case using this TestDatabase.

      '''
      self.manifest                                   = manifest

    @abc.abstractmethod
    def populate_from_seed(self):
      '''
      Uses the data in seeds to initialize the contents of the database. If any prior contents exist, they will be removed.
      '''

    @abc.abstractmethod
    def enrich_from_seed(self, seeding_round):
      '''
      Uses the data in seeds to enrich the contents of the database.

      @param seeding_round An int, designating the round fo seeding for which we seek the path.
              By default it is 0, so it returns a path to a folder called "SEED@T0". For some test cases that is the
              only seeding event in the lifecycle of the test, but other test cases require multiple phases where
              at each phase we need to simulate that the user has changed or added additional
              content to the database. In that case, the test harness pattern calls for multiple seeding events each of
              which will enrich the database at different times from data in different folders. For example,
              a folder "SEED@T0" would be used for an initial seeding at the start of the test,
              then "SEED@T1" for content that must be used to enrich the database in a subsequent phase 1, then
              "SEED@T2" for a subsequent phase 2, etc.

      '''

    def create_snapshot(self, snapshot_count):
      '''
      This method creates a copy of the content of this TestDatabase's "live content", i.e., what normally
      exists under the folder

            {self.manifest.scenarios_root_folder}/{self.scenario_id}/ACTUALS@LATEST

      For example, a folder like 

            ".../vulnerability_management_scenarios/1001/ACTUALS@latest"

      The content is copied to a folder called ACTUALS@T{snapshot_count}.
      
      In the preceding example, if `snapshot_count` is 3, then the folder under which the content is copied would be

            {self.manifest.scenarios_root_folder}/{self.scenario_id}/ACTUALS@T2

      So we think of this method as "at time T2, snapshot ACTUALS@latest as ACTUALS@T2".

      @param snapshot_count An int, which should be bigger than 0. 
      '''
      if snapshot_count is None or snapshot_count <= 0:
        raise ValueError("Invalid snapshot count '" + str(snapshot_count) + "'. Should be an integer at least equal to 1")
      
      snapshot_path                                   = self.manifest._path_to_test_db( 
                                                                          db_type         = TestStatics.TEST_DATABASE_ACTUALS, 
                                                                          snapshot_count  = snapshot_count)
      for hub in self.manifest.get_data_hubs():
              hub.create_snapshot(snapshot_path)




